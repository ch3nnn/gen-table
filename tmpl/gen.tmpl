// Code generated by gen-table. DO NOT EDIT.
// Code generated by gen-table. DO NOT EDIT.
// Code generated by gen-table. DO NOT EDIT.

package dao


import (
    "context"

    {{ range .ImportPaths }}
    {{.}}{{ end }}
	"gorm.io/gen"
	"gorm.io/gen/field"
)

{{ $modelStructNameLowerFirst := .ModelStructName | LowerFirst }}
{{ $modelStructName := .ModelStructName}}
var _ i{{.ModelStructName}}Dao = (*{{.ModelStructName | LowerFirst }}Dao)(nil)

type I{{.ModelStructName}}Dao interface {
    iWhere{{.ModelStructName}}Func
    WithContext(ctx context.Context) iCustomGen{{.ModelStructName}}Func
}

func (d *custom{{.ModelStructName}}Dao) WithContext(ctx context.Context) iCustomGen{{.ModelStructName}}Func {
	d.{{ $modelStructNameLowerFirst }}Do = d.{{ $modelStructNameLowerFirst }}Do.WithContext(ctx)
	return d
}

// ------------------------------------
// {{.ModelStructName}} {{ .TableComment }} ColumnName
// ------------------------------------
type iWhere{{.ModelStructName}}Func interface {
	{{ range .Fields }}
	WhereBy{{.Name}}({{.ColumnName | CamelCase | GoKeywordCase }} {{ .Type | TypeCase }}) func(dao gen.Dao) gen.Dao{{if eq .ColumnComment "" }}{{else}} // {{ .ColumnComment }} {{end}}{{ end }}

}

// ------------------------------------
// {{.ModelStructName}} {{ .TableComment }} Generate Function
// ------------------------------------
type iGen{{.ModelStructName}}Func interface {
	Create(m *model.{{.ModelStructName}}) (*model.{{.ModelStructName}}, error)
	Delete(whereFunc ...func(dao gen.Dao) gen.Dao) error
	DeletePhysical(whereFunc ...func(dao gen.Dao) gen.Dao) error
	Update(v interface{}, whereFunc ...func(dao gen.Dao) gen.Dao) (rowsAffected int64, err error)
	FindCount(whereFunc ...func(dao gen.Dao) gen.Dao) (int64, error)
	FindOne(whereFunc ...func(dao gen.Dao) gen.Dao) (*model.{{.ModelStructName}}, error)
	FindAll(whereFunc ...func(dao gen.Dao) gen.Dao) ([]*model.{{.ModelStructName}}, error)
	FindPage(page int, pageSize int, orderColumns []field.Expr, whereFunc ...func(dao gen.Dao) gen.Dao) ([]*model.{{.ModelStructName}}, int64, error)
	Scan(result interface{}, whereFunc ...func(dao gen.Dao) gen.Dao) (err error)
	ScanPage(page int, pageSize int, orderColumns []field.Expr, result interface{}, whereFunc ...func(dao gen.Dao) gen.Dao) (count int64, err error)
}


type i{{.ModelStructName}}Dao interface {
    iWhere{{.ModelStructName}}Func
	iGen{{.ModelStructName}}Func
}

type {{ $modelStructNameLowerFirst }}Dao struct {
	{{ $modelStructNameLowerFirst }}Do query.I{{ .ModelStructName }}Do
}

{{ range .Fields }}
{{if eq .ColumnComment "" }}{{else}}// WhereBy{{.Name}} {{ .ColumnComment }} {{end}}
func (s *{{ $modelStructNameLowerFirst }}Dao) WhereBy{{.Name}}({{  .ColumnName | CamelCase | GoKeywordCase }} {{ .Type | TypeCase }}) func(dao gen.Dao) gen.Dao {
	return func(dao gen.Dao) gen.Dao {
		{{if eq .Type "bool" }}return dao.Where(query.{{$modelStructName}}.{{.Name}}.Is({{.ColumnName | CamelCase | GoKeywordCase }})){{else}}return dao.Where(query.{{$modelStructName}}.{{.Name}}.Eq({{.ColumnName | CamelCase | GoKeywordCase }})){{end}}
    }
}
{{ end }}


func (s *{{ $modelStructNameLowerFirst }}Dao) Create(m *model.{{.ModelStructName}}) (*model.{{.ModelStructName}}, error) {
	if err := s.{{.ModelStructName| LowerFirst }}Do.Create(m); err != nil {
		return nil, err
	}
	return s.FindOne(s.WhereByID(m.ID))
}

func (s *{{ $modelStructNameLowerFirst }}Dao) FindCount(whereFunc ...func(dao gen.Dao) gen.Dao) (int64, error) {
	return s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).Count()
}

func (s *{{ $modelStructNameLowerFirst }}Dao) FindOne(whereFunc ...func(dao gen.Dao) gen.Dao) (*model.{{.ModelStructName}}, error) {
	return s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).First()
}

func (s *{{ $modelStructNameLowerFirst }}Dao) FindAll(whereFunc ...func(dao gen.Dao) gen.Dao) ([]*model.{{.ModelStructName}}, error) {
	return s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).Find()
}

func (s *{{ $modelStructNameLowerFirst }}Dao) FindPage(page int, pageSize int, orderColumns []field.Expr, whereFunc ...func(dao gen.Dao) gen.Dao) ([]*model.{{.ModelStructName}}, int64, error) {
	return s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).Order(orderColumns...).FindByPage((page-1)*pageSize, pageSize)
}

// 注意 当通过 struct 更新时，GORM 只会更新非零字段
// 如果想确保指定字段被更新，使用 map 来完成更新操作
func (s *{{ $modelStructNameLowerFirst }}Dao) Update(v interface{}, whereFunc ...func(dao gen.Dao) gen.Dao) (rowsAffected int64, err error) {
	info, err := s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).Updates(v)
	if err != nil {
		return rowsAffected, err
	}

	return info.RowsAffected, nil
}

func (s *{{ $modelStructNameLowerFirst }}Dao) Delete(whereFunc ...func(dao gen.Dao) gen.Dao) error {
	if _, err := s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).Delete(); err != nil {
		return err
	}
	return nil
}

func (s *{{ $modelStructNameLowerFirst }}Dao) DeletePhysical(whereFunc ...func(dao gen.Dao) gen.Dao) error {
	if _, err := s.{{.ModelStructName| LowerFirst }}Do.Unscoped().Scopes(whereFunc...).Delete(); err != nil {
		return err
	}
	return nil
}

func (s *{{ $modelStructNameLowerFirst }}Dao) Scan(result interface{}, whereFunc ...func(dao gen.Dao) gen.Dao) (err error) {
    return s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).Scan(result)
}

func (s *{{ $modelStructNameLowerFirst }}Dao) ScanPage(page int, pageSize int, orderColumns []field.Expr, result interface{}, whereFunc ...func(dao gen.Dao) gen.Dao) (count int64, err error) {
    return s.{{.ModelStructName| LowerFirst }}Do.Scopes(whereFunc...).Order(orderColumns...).ScanByPage(result, (page-1)*pageSize, pageSize)
}
